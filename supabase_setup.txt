-- ====================================================================================
-- RAM E-COMMERCE SUPABASE SETUP SCRIPT (V2 - CORRECTED)
-- ====================================================================================
-- This script will completely reset and configure your database.
-- FIX: Added a UNIQUE constraint to the products.name column to resolve the 42P10 error.
-- ====================================================================================

-- ========= Step 1: Clean Slate - Drop existing objects =========
-- This ensures we start fresh and avoid conflicts with old configurations.

DROP TABLE IF EXISTS public.products CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;
DROP FUNCTION IF EXISTS public.handle_new_user() CASCADE;


-- ========= Step 2: Create the 'products' table (with the fix) =========

CREATE TABLE public.products (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL UNIQUE, -- <<< THE FIX IS HERE. This column must be unique for ON CONFLICT to work.
    description text,
    price numeric NOT NULL,
    category text NOT NULL,
    images text[] DEFAULT '{}'::text[],
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


-- ========= Step 3: Create the 'profiles' table for user data =========

CREATE TABLE public.profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    updated_at timestamp with time zone,
    full_name text,
    avatar_url text
);


-- ========= Step 4: Set up the trigger for new user profiles =========

CREATE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id)
  VALUES (new.id);
  RETURN new;
END;
$$;

-- The trigger that calls the function after a new user signs up.
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- ========= Step 5: Define Row Level Security (RLS) Policies =========

-- --- PRODUCTS TABLE POLICIES ---
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to products" ON public.products FOR SELECT
USING (true);

-- --- PROFILES TABLE POLICIES ---
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to profiles" ON public.profiles FOR SELECT
USING (true);

CREATE POLICY "Allow users to update their own profile" ON public.profiles FOR UPDATE
USING (auth.uid() = id);


-- ========= Step 6: Insert Sample Product Data =========
-- This will now work correctly because the 'name' column is unique.

INSERT INTO public.products (name, description, price, category, images)
VALUES
    ('T-90 Bhishma Tank', 'A highly detailed 1:35 scale model of the Indian Army''s main battle tank.', 4999, 'Tanks', '{"https://i.postimg.cc/8Ck7p74p/tank-1.jpg", "https://i.postimg.cc/W1Y4bVd5/tank-2.jpg"}'),
    ('HAL Tejas Fighter Jet', 'A 1:72 scale model of India''s indigenous multirole light fighter aircraft.', 3499, 'Aircraft', '{"https://i.postimg.cc/pXv9vj0d/jet-1.jpg", "https://i.postimg.cc/L86wLqGq/jet-2.jpg"}'),
    ('Para SF Commando', 'A 1:16 scale action figure of a Para Special Forces operative with gear.', 2499, 'Soldiers', '{"https://i.postimg.cc/50MN2gVn/soldier-1.jpg"}'),
    ('Sukhoi Su-30MKI', 'A premium 1:48 scale model of the Indian Air Force''s frontline air superiority fighter.', 7999, 'Aircraft', '{}'),
    ('Arjun MBT Mk-1A', 'A 1:35 scale model of the advanced Arjun Main Battle Tank.', 5499, 'Tanks', '{"https://i.postimg.cc/sX3SjJcK/tank-3.jpg"}'),
    ('HAL LCH Prachand', 'A 1:72 scale model of the Indian indigenous combat helicopter.', 4299, 'Helicopters', '{}')
ON CONFLICT (name) DO NOTHING; -- This clause now has a unique column to check against.

-- ====================================================================================
-- SETUP COMPLETE
-- ====================================================================================
